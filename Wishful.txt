








prototype 


entity 
    [ pose
    , shape
    , size
    , color
    , renderable Transparent
    , physics
    , attachment entityID offset
    , attractor radius
    ]



attractorSystem = do
    forM attractors $ \(entityID, Attractor radius) -> do
        position <- use (poses . at entityID . posPosition)
        nearbyIDs <- findEntitiesWithin radius position


attach entityID toEntityID = do
    findOffset entityID toEntityID
    attachments . at entityID ?= Attachment toEntityID offset


attachmentsSystem = do
    forM attachments $ \(entityID, Attachment toEntityID offset) -> do
        pose <- use (poses . at entityID)
        poses . at toEntityID ?= pose + offset


physicsSystem = do


syncPhysicsPosesSystem = do



-- Here we sketch an extensible component system...


data Physics = Physics { phyRigidBody :: RigidBody , phyGhost :: GhostObject }
newtype PhysicsMap = PhysicsMap { unPhysicsMap :: EntityMap Physics }
makeClassy ''PhysicsMap


newtype ShapeMap = ShapeMap  { unShapeMap :: EntityMap Shape }
makeClassy ''ShapeMap
newtype PoseMap  = PoseMap   { unPoseMap  :: EntityMap Pose }
makeClassy ''PoseMap
newtype ColorMap  = ColorMap { unColorMap  :: EntityMap Color }
makeClassy ''ColorMap




data RenderResources = RenderResources 
    { rstProj44 :: M44
    , rstViewM44 :: M44
    , rstShapes :: [(ShapeType, Shape)] 
    }

renderSystem :: ( HasRenderResources r
                , HasPoseMap r
                , HasShapeMap r
                , HasSizeMap r
                , HasColorMap r
                , MonadReader r m, MonadIO m) => m ()
renderSystem = do
    projM44 <- view rstProjM44
    viewM44 <- view rstViewM44



{- 
How does this work with dynamically creating new systems? Does it? I don't think so...
We can't call a "createSystem" command with all those types in the way.
How would the system dynamically modify the Component DB with the new rows it needs?


IntMap ComponentID Component?

myComponentID <- registerComponent myComponent
^ rather than string lookups...

Punt on extensible systems and just use scripts? 
Scripts still need state data... 
but the dynamic approach is OK there...
-}
