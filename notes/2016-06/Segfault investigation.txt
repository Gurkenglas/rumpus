First investigation culminated in the discovery of a workaround:
having the GHC API compile and load a file that triggers loading
all libraries that the program wants to use (e.g. import Rumpus; see resources/Loader.hs)
before the main program actually starts running seems to dramatically reduce the number of crashes
to a tolerable level. I think I've still seen it happen, but it's 1 in 100 rather than 1 in 2.
It potentially has something to do with the main thread accessing the libraries (e.g. openvr, bullet)
while the GHC API is trying to load them.



***

Got something interesting! This was with Compiled enabled.

zero_static_object_list (first_static=<optimized out>) at rts\sm\GC.c:1477
1477    rts\sm\GC.c: No such file or directory.

[Switching to Thread 16636.0x2760]
zero_static_object_list (first_static=<optimized out>) at rts\sm\GC.c:1477
1477    rts\sm\GC.c: No such file or directory.
(gdb) bt
#0  zero_static_object_list (first_static=<optimized out>) at rts\sm\GC.c:1477
#1  0x0000000003e22f1e in GarbageCollect (collect_gen=collect_gen@entry=0,
    do_heap_census=rtsFalse, do_heap_census@entry=(unknown: 160300768),
    gc_type=gc_type@entry=0, cap=cap@entry=0x16c3c0) at rts\sm\GC.c:683
#2  0x0000000003e17311 in scheduleDoGC (pcap=pcap@entry=0x98dfef0,
    task=0x7ffff6f99c40 <msvcrt!malloc+112>,
    task@entry=0x7ffff4f18102 <KERNEL32!BaseThreadInitThunk+34>,
    force_major=(unknown: 4), force_major@entry=rtsFalse) at rts\Schedule.c:1671
#3  0x0000000003e17e95 in schedule (initialCapability=<optimized out>,
    task=0x7ffff4f18102 <KERNEL32!BaseThreadInitThunk+34>, task@entry=0x5161ab0)
    at rts\Schedule.c:557
#4  0x0000000003e18a2f in scheduleWorker (cap=<optimized out>, task=0x5161ab0)
    at rts\Schedule.c:2397
#5  0x00007ffff4f18102 in KERNEL32!BaseThreadInitThunk ()
   from C:\WINDOWS\system32\kernel32.dll
#6  0x00007ffff764c5b4 in ntdll!RtlUserThreadStart ()
   from C:\WINDOWS\SYSTEM32\ntdll.dll
#7  0x0000000000000000 in ?? ()
Backtrace stopped: previous frame inner to this frame (corrupt stack?)
(gdb)

Even more interesting... that function was removed in 8.0.
https://github.com/simonmar/blog/blob/master/posts/2015-07-28-optimising-garbage-collection-overhead-in-sigma.md
