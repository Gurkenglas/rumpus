loadScene folder = do
    removeAllEntitiesExceptHands
    library = list *.hs
    for value in list worldstate/*.yaml
        restoreentityfromyaml value

spawnNameAtPose name pose = do
    codeFile = (name.hs, "start")
    entityID <- spawnPersistentEntity $ do
        startExpr ==> codeFile
        position ==> pose
    handID `grabEntity` entityID


SUMMARY 1:
HS files in a scene folder establish the namespace.
No YAML files in scene folder, only HS.
Nothing is auto-instantiated.
WorldState/ subfolder holds the YAML files of all persistent instances.
Names in there should be something like StartFile-EntityID.hs
(name doesn't matter, just needs to be unique and deterministic)

If you want to take something like a Room and make it instanced, just make a persistent House.hs that spawns transient rooms and positions them.
Can also make a new .hs object that spawns the room at its position, and just do that for each object.

We'll later be able to add editors to the objects and that'll take care of per-instance positioning/customization stuff.

Delete by putting back into library.



Sleeve idea: holding down button unfurls your sleeve to make the library appear in some way.
When sleeve is tucked, you can reach into it to grab an object.
Either make it the last thing you spawned or a new object.




We have Scenes, like Room, that consist of objects like Fountain, Orrery etc.

Main.hs
Room
Stars


Main.hs places environmental objects
When you start rumpus, main is there.
So for something like Ribbon, Room and City
they default to 0,0,0 and can be overridden by Main.hs
Where are their consoles? Also centered at 0,0,0?
Sometimes we want to place the console, I guess each object can decide that on its own.

Simple existence of Room.yaml/Room.hs in a scene folder can still
cause the object to be spawned? Do we want that or not?

Should we need a yaml file? I think not... .hs should be fine, and yaml only used for things that make sense to save. So just plopping Room.hs into the folder will cause it to instantiate. It can be transient so it doesn't save.
Or, perhaps better, adding it to the folder just adds it to the namespace. This fixes the thing of NewObject1.hs, where the user has created a new file and instance but has put it somewhere specific. We don't want to automatically create one NewObject1.hs in the center of the room and another whereever they placed it.

Next: OK, so we put all objects into the namespace. You can pull of a list of .hs files like Room, City, Orrery etc. You pull out Room and it appears around you. Now you want to move it; you can set it in the code but that will apply to all instances. So we really need a way to just edit per-instance data, ideally with editors rather than the yaml file!
Editing the yaml file directly might work, perhaps as a separate pane.
Other way to do it is with a super-code file that instantiates the rooms transiently and then changes their position. I think that's the way for now!!


For Notes, we want then to all share a Note.hs file. That can be achieved just fine by saying setStartExpr.

So as is becoming clear, the YAML is really only for instances!

[x] Need to be able to reset shape.

Environment objects
Stars

Hybrid (environmental, but could easily be instanced)
Ribbon
Room (floor, shelves)
City block


Copyable:
Fountain
Orrery
Verylogue
Tree


NewObject1.hs
NewObject2.hs

Duplicating


Sequencer Note
