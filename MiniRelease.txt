[x] Teleporting
    [x] Player pose stuff is all screwy. Fix the inv44 nonsense etc. in vr-pal.
    [x] If doing head, do hands too.
    [x] Headlight doesn't follow player, since head44 is untransformed. Shouldn't head44 just be transformed in vr-pal?
    
    [ ] Add a ray and visual feedback for what you'll teleport to.
            (and haptics OBVZ)
    [ ] Could possibly do a slide animation (or just do fadein-out via valve api)

[ ] Do a slightly nicer default shader? Maybe some lights? We are not using the GPU at all so this would be rad...

[ ] Ditch the yaml files?? I think this is the right idea for what's shipping...
    Except, how to deal with editing without resetting position etc.? 
    Have a separate "initialize" function that is only run at startup?
    Can do a Main.hs that starts the world when it runs?
        And, rather than a separate initialize, Main could spawn the objects and set their positions...

    This also nicely simplifies object instances; can just keep track of what haskell files are available.
    Remember the whole component editors idea though...
    Boy it would make the demo a lot better, as you'd start with creating a few objects, 
    setting their size and color, and then specifying their behavior.


[ ] Move buffering of matrices before waitGetPoses too??
    Need to handle hands somehow.
    (I think we don't want to do this? because the idea is that waitGetPoses will wait until 2ms before vsync
    and give us time to submit all the render calls. we are probably well within time for that... but I guess try it!)

[x] Scale matrix caching - parallel holding of scaled and normal matrix... is this possible in an easy way?

[ ] Text matrix caching
    [x] Cache correction matrix
    [ ] Cache objectPose !*! textPose !*! correctionMatrix?
        A bit trickier, since we have to make sure we catch everything that will change any of those...

[x] Held object haptics

[ ] Text display improvements... how hard would a virtual screen be???
    Prototype it in freetype-gl-mini. Basically, render to texture, add curve, add shader.
    Or, just do clipping and put shaders on the text.
    [x] Cursor is way too hard to see! *********
    [ ] Add line numbers?? Any way to do that easily??


[ ] Crasher when turning controllers on after launch

[ ] Finish keyboard
    [ ] Fullsize keys for space etc.
    [x] Haptics for moving thumb on keys
        [ ] Different vibrations to let you know that you're still on the right key??
            (e.g. a is 100hz, s is 200hz, d is 300hz, etc.)
    [ ] Only show keyboard when object selected

    [x] Get touchpad down event from steamVR


[ ] Create intro object
        Have it be the only thing that you start out seeing, and have the other objects on other platforms?
        TRY EDITING ME
    [ ] Rename cmp to my

[ ] 1080p render for video? 
    This would be possibly quite easy with a threaded render that takes the last world state and renders it!
    This is where we can let our immutable structures shine :)
    (but make sure we're not querying anything mutable like DynamicsWorld, though I think that's taken care of by how Rumpus is structured.)

[ ] Add microphone-reactive object
[ ] Add sequencer platform
    [ ] Note: only have limited voices so ditch the per-note positioning 
        and just have them all report to a verylogue instance, which will 
        set things up nicely for doing a full synth+sequencer
[ ] Some sort of swarm of cubes? 

[ ] Add Tab, Shift-Tab, Control-Enter support to freetype-gl-mini 
    (tab operates on beginning of line, insert or remove 4 spaces, easy : ))

[ ] Add notes to Early Access notes about the intentions of rumpus to become something that "normal people" can use, 
    but is itself the tool in which such a friendlier and more powerful environment is to be created.





[ ] (later!!!) Implement Vlachos's idea of total render-thread asynchrony. This will be easy with our immutable datastructures.
    sendToRenderer :: (MonadIO m, MonadState ECS m) => m ()
        worldState <- get 
        swapTVarIO worldStateRef worldState.

    forkOS $ do
        worldState <- readTVarIO worldStateRef
        flip runStateT worldState $ do
            (headM44, vrEvents) <- tickVR
            tickRendererSystem headM44

    renderThread is responsible for WaitGetPoses and Submit. it is a forkOS'd high priority thread.
    It just takes the worldState and runs what is currently in tickRenderer on it.
    In an improved version, we can calculate trajectories to interpolate objects from one frame to another when a frame is missed.
    But even with just the most boneheaded implementation as above, it will be better than reprojection 
    since things will render perfectly and only animations will judder. 
    (we could special case the hands to make sure they and their attachments always render correctly)

    think about how to make sure the world doesn't get ahead of render... maybe just as a first stab, 
    worldStateRef is an MVar such that putMVar blocks if the renderer hasn't gotten to our last worlddata yet?

    Really, this is so simple that it may be worth trying since the gains would be large; they're be essentially no garbage at all on the renderthread

    (a complication comes to mind: would need to improve the way TextRenderers handle their updateMetrics calls 
    since currently they synchronously update their GL state whenever they change. 
    Maybe just an isDirty flag that can get processed on the render thread?? 
    That would probably do the trick!)

    Try having render thread be main thread, logic thread forked and vice versa.

    All in all, especially combined with a hard entity limit that we know we can render smoothly, 
    this would be a pretty good system to making sure user errors don't explode everything as they do currently!

[ ] Another great idea from talk 1: pass BOTH eye M44s in one render call, and output to both framebuffers at the same time
    while using instanced rendering. Use odd instances to render to left eye, even to right eye? Or something like that,
    but point is in general that you render all geometry of a kind to both eyes at once.

[x] Fix hands swapping for haptics
[x] Fix error message positioning 

[x] Build city

[x] Add exception handler to update and start functions. See older cubensis code for instructions..

[x] Find Windows documents directory, copy scenes there and load from there
    getUserDocumentsDirectory
    copy scenes 

[x] Fix audio on release builds! 
    Make sure HRTFs are working, we might need to include the openal folder in the release,
    or figure out the openal api
    NOTES: what have I learned:
    The problem is in communication between libpd and the pd patches...
    The pd patches don't seem to get anything from libpd when I send values.
    I am able to print, but print only works if it is a string.

    GOOD NEWS:
    It seems to be linked to the msys64 directory again. I renamed it and it works perfectly again.
    MYSTERY: things work fine with the testz folder on the desktop that I built from pd-haskell tests.
    Why are they not affected? What is the remaining link to msys64? msys64 is not in the windows path...
    But regardless, I can probably just ignore this issue since most people won't have an msys64 path to begin with!
    but I do need to fix it so I can develop...
    Try a tool to see what files are being opened. 

[x] Finish faster code-update system.
        Basic idea: we want to pass char buffers to the GHC API.
        Maybe premature optimization, but could have TextBuffer store each line in parallel as a char buffer and a Seq, 
        rebuilding the char buffer on each change to a line, and just gluing the buffers together when dumping its contents as a single char buffer.

        While passing it off, also save the file on a background queue thread.
        We also want to pause the file watcher while we save our version of the file so it doesn't resubmit it for recompilation.

        Right now, have selected code hook into CodeEditor and pass a String to Halive via a CompilationRequest. 
        Disable code loading from files to ensure that this fixes things, then implement the filewatcher pausing.
        Switch file saving to be async.

        [x] I've commented out refreshTextRendererFromFile in CodeEditor.hs:264
            (since it's the cause of the pauses while typing!) while I figure out
            the right way to refresh the text - should do the readFile call 
            in the background upon receiving the FileEvent, but also want to be able
            to pause that when we are making edits.

            (something something file modification date?? How to communicate this to this different bits though...)


[ ] Performance notes:
    The data buffering will be a lot faster once we've got everything in aligned vectors;
    currently we're doing tons and tons of lookups on entityIDs when we'd rather just iterate a bunch of buffers in parallel:
    case in point being rendering, we want [Color] [M44] that we can dump into StreamingArrayBuffers directly

import Rumpus

-- This is the code that generates the shape you see above.

-- These variables change how the object looks and behaves
rotationSpeed = 1

-- Try changing the colors!
objectColor = colorRGB (1,2,3)

-- Here's where we actually set up the object!
start = do
    myColor ==> objectColor

    -- This is the "Update" function, which gets run 90 times per second to
    -- to define how the object behaves.
    -- In this case, we're having the object change 
    -- its rotation and color 
    -- based on what time it is.
    myUpdate ==> do
        now <- getNow
        setRotation (V3 0 1 0) (now * rotationSpeed)
        setColor (newColor {hue = now, saturation = 0.6 brightness = 0.7)

data Color = Color { hue :: GLfloat, saturation :: GLfloat, brightness :: GLfloat }

setColor Color{..} = setColorV4 (hslColor hue saturation brightness)

setPosition position = do
    pose <- getPose
    setPose $ mkTransformation (pose & translation .~ position)

setRotation axis angle = do
    pose <- getPose
    setPose $ mkTransformation (axisAngle axis angle) (pose ^. translation)
